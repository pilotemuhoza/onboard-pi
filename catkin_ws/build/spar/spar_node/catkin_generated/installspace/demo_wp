#!/usr/bin/env python3

import sys
from math import *

#import roslib
#roslib.load_manifest('spar_node')
import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

def send_wp(spar_client, x, y, z, yaw):
	speed = rospy.get_param("~speed", 1.0)
	accuracy = rospy.get_param("~accuracy", 0.1)

	goal = FlightMotionGoal()
	goal.motion = FlightMotionGoal.MOTION_GOTO
	goal.position.x = x
	goal.position.y = y
	goal.position.z = z
	goal.yaw = yaw
	goal.velocity_vertical = speed
	goal.velocity_horizontal = speed
	goal.yawrate = speed
	goal.wait_for_convergence = True							# Wait for our takeoff "waypoint" to be reached
	goal.position_radius = accuracy
	goal.yaw_range = accuracy

	spar_client.send_goal(goal)
	 # If shutdown is issued, cancel current mission before rospy is shutdown
	rospy.on_shutdown(lambda : spar_client.cancel_goal())
	# Wait for the result of the goal
	spar_client.wait_for_result()

	#Stop at waypoint for a moment
	rospy.sleep(2)

	# Output some feedback for our motion
	return spar_client.get_state() == GoalStatus.SUCCEEDED

def send_wps(spar_client):
	success = True

	# List of waypoints
	# [X, Y, Z, Yaw]
	wps = [[ 0.0, 0.0, 1.0, 0.0],
		   [ 1.0, 1.0, 1.0, 0.0],
		   [-1.0, 1.0, 1.0, 0.0],
		   [-1.0,-1.0, 1.0, 0.0],
		   [-5.0,-5.0, 5.0, 0.0],
		   [ 1.0,-1.0, 1.0, 0.0],
		   [ 0.0, 0.0, 1.0, 0.0]]

	# Loop through each waypoint in our list
	i = 0
	for wp in wps:
		rospy.loginfo("Sending waypoint %i..." % (i + 1))
		success = send_wp(spar_client, wp[0], wp[1], wp[2], wp[3])
		i += 1

		# If we had an error, print and stop sending
		if not success:
			rospy.logerr("Waypoints failed!")
			break;

	if success:
		rospy.loginfo("Waypoints complete!")

def main(args):
	# Initialise ROS
	rospy.init_node('takeoff', anonymous=True)
	# Get our action namespace (where to send flight commands to)
	action_ns = rospy.get_param("~action_topic", 'spar/flight')

	# Create our action client
	spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
	rospy.loginfo("Waiting for spar...")
	spar_client.wait_for_server()

	# Send the flight command
	# This will lock the thread until it is "done"
	# Make sure "ros is ok" in case we hit CTRL-C while waiting above
	if not rospy.is_shutdown():
		send_wps(spar_client)

if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('')
