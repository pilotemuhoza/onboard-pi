# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal

# Motion to execute
uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)
uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)
uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)
uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)
uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)
uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)

uint8 motion

# Positional information (some things may be ignored, see above)
geometry_msgs/Point position
float32 yaw

# Velocity information (some things may be ignored, see above)
# Goal will act as "setpoint" if all velocities are ==0, values of <0 will be rejected
# If all velocities are ==0, goal will imidiately be finished if not using "wait_for_convergence"
# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will
# be used to coordinate the motion such that all motions finish at the same point in time
float32 velocity_vertical			# Speed to ascend and descent
float32 velocity_horizontal			# Speed to translate
float32 yawrate						# Speed to rotate

# Convergence information (wait until at location before marking 'complete')
# If enabled, radius and range values of <=0 will be rejected
# Note: Landing motions will do not accept "wait_for_convergence", but instead will continue
#		landing until the action is either cancelled or the UAV is disarmed
bool wait_for_convergence			# Enable "wait for convergence"
float32 position_radius				# Positional radius around final location (bubble waypoint)
float32 yaw_range					# Angular range around final direction (direction wedge)

