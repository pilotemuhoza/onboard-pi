; Auto-generated. Do not edit!


(cl:in-package spar_msgs-msg)


;//! \htmlinclude FlightMotionActionGoal.msg.html

(cl:defclass <FlightMotionActionGoal> (roslisp-msg-protocol:ros-message)
  ((header
    :reader header
    :initarg :header
    :type std_msgs-msg:Header
    :initform (cl:make-instance 'std_msgs-msg:Header))
   (goal_id
    :reader goal_id
    :initarg :goal_id
    :type actionlib_msgs-msg:GoalID
    :initform (cl:make-instance 'actionlib_msgs-msg:GoalID))
   (goal
    :reader goal
    :initarg :goal
    :type spar_msgs-msg:FlightMotionGoal
    :initform (cl:make-instance 'spar_msgs-msg:FlightMotionGoal)))
)

(cl:defclass FlightMotionActionGoal (<FlightMotionActionGoal>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <FlightMotionActionGoal>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'FlightMotionActionGoal)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name spar_msgs-msg:<FlightMotionActionGoal> is deprecated: use spar_msgs-msg:FlightMotionActionGoal instead.")))

(cl:ensure-generic-function 'header-val :lambda-list '(m))
(cl:defmethod header-val ((m <FlightMotionActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader spar_msgs-msg:header-val is deprecated.  Use spar_msgs-msg:header instead.")
  (header m))

(cl:ensure-generic-function 'goal_id-val :lambda-list '(m))
(cl:defmethod goal_id-val ((m <FlightMotionActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader spar_msgs-msg:goal_id-val is deprecated.  Use spar_msgs-msg:goal_id instead.")
  (goal_id m))

(cl:ensure-generic-function 'goal-val :lambda-list '(m))
(cl:defmethod goal-val ((m <FlightMotionActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader spar_msgs-msg:goal-val is deprecated.  Use spar_msgs-msg:goal instead.")
  (goal m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <FlightMotionActionGoal>) ostream)
  "Serializes a message object of type '<FlightMotionActionGoal>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'goal_id) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'goal) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <FlightMotionActionGoal>) istream)
  "Deserializes a message object of type '<FlightMotionActionGoal>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'goal_id) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'goal) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<FlightMotionActionGoal>)))
  "Returns string type for a message object of type '<FlightMotionActionGoal>"
  "spar_msgs/FlightMotionActionGoal")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'FlightMotionActionGoal)))
  "Returns string type for a message object of type 'FlightMotionActionGoal"
  "spar_msgs/FlightMotionActionGoal")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<FlightMotionActionGoal>)))
  "Returns md5sum for a message object of type '<FlightMotionActionGoal>"
  "74f6863cc63ccf58f36ff50fd69b7c68")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'FlightMotionActionGoal)))
  "Returns md5sum for a message object of type 'FlightMotionActionGoal"
  "74f6863cc63ccf58f36ff50fd69b7c68")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<FlightMotionActionGoal>)))
  "Returns full string definition for message of type '<FlightMotionActionGoal>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%FlightMotionGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Goal~%~%# Motion to execute~%uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)~%uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)~%uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)~%uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)~%uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)~%uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)~%~%uint8 motion~%~%# Positional information (some things may be ignored, see above)~%geometry_msgs/Point position~%float32 yaw~%~%# Velocity information (some things may be ignored, see above)~%# Goal will act as \"setpoint\" if all velocities are ==0, values of <0 will be rejected~%# If all velocities are ==0, goal will imidiately be finished if not using \"wait_for_convergence\"~%# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will~%# be used to coordinate the motion such that all motions finish at the same point in time~%float32 velocity_vertical			# Speed to ascend and descent~%float32 velocity_horizontal			# Speed to translate~%float32 yawrate						# Speed to rotate~%~%# Convergence information (wait until at location before marking 'complete')~%# If enabled, radius and range values of <=0 will be rejected~%# Note: Landing motions will do not accept \"wait_for_convergence\", but instead will continue~%#		landing until the action is either cancelled or the UAV is disarmed~%bool wait_for_convergence			# Enable \"wait for convergence\"~%float32 position_radius				# Positional radius around final location (bubble waypoint)~%float32 yaw_range					# Angular range around final direction (direction wedge)~%~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'FlightMotionActionGoal)))
  "Returns full string definition for message of type 'FlightMotionActionGoal"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%FlightMotionGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Goal~%~%# Motion to execute~%uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)~%uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)~%uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)~%uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)~%uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)~%uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)~%~%uint8 motion~%~%# Positional information (some things may be ignored, see above)~%geometry_msgs/Point position~%float32 yaw~%~%# Velocity information (some things may be ignored, see above)~%# Goal will act as \"setpoint\" if all velocities are ==0, values of <0 will be rejected~%# If all velocities are ==0, goal will imidiately be finished if not using \"wait_for_convergence\"~%# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will~%# be used to coordinate the motion such that all motions finish at the same point in time~%float32 velocity_vertical			# Speed to ascend and descent~%float32 velocity_horizontal			# Speed to translate~%float32 yawrate						# Speed to rotate~%~%# Convergence information (wait until at location before marking 'complete')~%# If enabled, radius and range values of <=0 will be rejected~%# Note: Landing motions will do not accept \"wait_for_convergence\", but instead will continue~%#		landing until the action is either cancelled or the UAV is disarmed~%bool wait_for_convergence			# Enable \"wait for convergence\"~%float32 position_radius				# Positional radius around final location (bubble waypoint)~%float32 yaw_range					# Angular range around final direction (direction wedge)~%~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <FlightMotionActionGoal>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'goal_id))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'goal))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <FlightMotionActionGoal>))
  "Converts a ROS message object to a list"
  (cl:list 'FlightMotionActionGoal
    (cl:cons ':header (header msg))
    (cl:cons ':goal_id (goal_id msg))
    (cl:cons ':goal (goal msg))
))
