; Auto-generated. Do not edit!


(cl:in-package spar_msgs-msg)


;//! \htmlinclude FlightMotionAction.msg.html

(cl:defclass <FlightMotionAction> (roslisp-msg-protocol:ros-message)
  ((action_goal
    :reader action_goal
    :initarg :action_goal
    :type spar_msgs-msg:FlightMotionActionGoal
    :initform (cl:make-instance 'spar_msgs-msg:FlightMotionActionGoal))
   (action_result
    :reader action_result
    :initarg :action_result
    :type spar_msgs-msg:FlightMotionActionResult
    :initform (cl:make-instance 'spar_msgs-msg:FlightMotionActionResult))
   (action_feedback
    :reader action_feedback
    :initarg :action_feedback
    :type spar_msgs-msg:FlightMotionActionFeedback
    :initform (cl:make-instance 'spar_msgs-msg:FlightMotionActionFeedback)))
)

(cl:defclass FlightMotionAction (<FlightMotionAction>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <FlightMotionAction>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'FlightMotionAction)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name spar_msgs-msg:<FlightMotionAction> is deprecated: use spar_msgs-msg:FlightMotionAction instead.")))

(cl:ensure-generic-function 'action_goal-val :lambda-list '(m))
(cl:defmethod action_goal-val ((m <FlightMotionAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader spar_msgs-msg:action_goal-val is deprecated.  Use spar_msgs-msg:action_goal instead.")
  (action_goal m))

(cl:ensure-generic-function 'action_result-val :lambda-list '(m))
(cl:defmethod action_result-val ((m <FlightMotionAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader spar_msgs-msg:action_result-val is deprecated.  Use spar_msgs-msg:action_result instead.")
  (action_result m))

(cl:ensure-generic-function 'action_feedback-val :lambda-list '(m))
(cl:defmethod action_feedback-val ((m <FlightMotionAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader spar_msgs-msg:action_feedback-val is deprecated.  Use spar_msgs-msg:action_feedback instead.")
  (action_feedback m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <FlightMotionAction>) ostream)
  "Serializes a message object of type '<FlightMotionAction>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_goal) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_result) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_feedback) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <FlightMotionAction>) istream)
  "Deserializes a message object of type '<FlightMotionAction>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_goal) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_result) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_feedback) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<FlightMotionAction>)))
  "Returns string type for a message object of type '<FlightMotionAction>"
  "spar_msgs/FlightMotionAction")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'FlightMotionAction)))
  "Returns string type for a message object of type 'FlightMotionAction"
  "spar_msgs/FlightMotionAction")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<FlightMotionAction>)))
  "Returns md5sum for a message object of type '<FlightMotionAction>"
  "4b0de8f0c37c614e42262cd2ed0d6a66")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'FlightMotionAction)))
  "Returns md5sum for a message object of type 'FlightMotionAction"
  "4b0de8f0c37c614e42262cd2ed0d6a66")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<FlightMotionAction>)))
  "Returns full string definition for message of type '<FlightMotionAction>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%FlightMotionActionGoal action_goal~%FlightMotionActionResult action_result~%FlightMotionActionFeedback action_feedback~%~%================================================================================~%MSG: spar_msgs/FlightMotionActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%FlightMotionGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Goal~%~%# Motion to execute~%uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)~%uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)~%uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)~%uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)~%uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)~%uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)~%~%uint8 motion~%~%# Positional information (some things may be ignored, see above)~%geometry_msgs/Point position~%float32 yaw~%~%# Velocity information (some things may be ignored, see above)~%# Goal will act as \"setpoint\" if all velocities are ==0, values of <0 will be rejected~%# If all velocities are ==0, goal will imidiately be finished if not using \"wait_for_convergence\"~%# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will~%# be used to coordinate the motion such that all motions finish at the same point in time~%float32 velocity_vertical			# Speed to ascend and descent~%float32 velocity_horizontal			# Speed to translate~%float32 yawrate						# Speed to rotate~%~%# Convergence information (wait until at location before marking 'complete')~%# If enabled, radius and range values of <=0 will be rejected~%# Note: Landing motions will do not accept \"wait_for_convergence\", but instead will continue~%#		landing until the action is either cancelled or the UAV is disarmed~%bool wait_for_convergence			# Enable \"wait for convergence\"~%float32 position_radius				# Positional radius around final location (bubble waypoint)~%float32 yaw_range					# Angular range around final direction (direction wedge)~%~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: spar_msgs/FlightMotionActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%FlightMotionResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%# Result~%~%geometry_msgs/Point final_position	# Final commanded position~%float32 final_yaw					# Final commanded yaw~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%FlightMotionFeedback feedback~%~%================================================================================~%MSG: spar_msgs/FlightMotionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%# Feedback~%~%float32 progress					# Progress 0..1 from start to goal~%bool waiting_for_convergence		# Mark to show if waiting for convergence~%~%geometry_msgs/Point goal_position	# Current goal position~%float32 goal_yaw					# Current goal yaw~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'FlightMotionAction)))
  "Returns full string definition for message of type 'FlightMotionAction"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%FlightMotionActionGoal action_goal~%FlightMotionActionResult action_result~%FlightMotionActionFeedback action_feedback~%~%================================================================================~%MSG: spar_msgs/FlightMotionActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%FlightMotionGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Goal~%~%# Motion to execute~%uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)~%uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)~%uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)~%uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)~%uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)~%uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)~%~%uint8 motion~%~%# Positional information (some things may be ignored, see above)~%geometry_msgs/Point position~%float32 yaw~%~%# Velocity information (some things may be ignored, see above)~%# Goal will act as \"setpoint\" if all velocities are ==0, values of <0 will be rejected~%# If all velocities are ==0, goal will imidiately be finished if not using \"wait_for_convergence\"~%# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will~%# be used to coordinate the motion such that all motions finish at the same point in time~%float32 velocity_vertical			# Speed to ascend and descent~%float32 velocity_horizontal			# Speed to translate~%float32 yawrate						# Speed to rotate~%~%# Convergence information (wait until at location before marking 'complete')~%# If enabled, radius and range values of <=0 will be rejected~%# Note: Landing motions will do not accept \"wait_for_convergence\", but instead will continue~%#		landing until the action is either cancelled or the UAV is disarmed~%bool wait_for_convergence			# Enable \"wait for convergence\"~%float32 position_radius				# Positional radius around final location (bubble waypoint)~%float32 yaw_range					# Angular range around final direction (direction wedge)~%~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: spar_msgs/FlightMotionActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%FlightMotionResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%# Result~%~%geometry_msgs/Point final_position	# Final commanded position~%float32 final_yaw					# Final commanded yaw~%~%~%================================================================================~%MSG: spar_msgs/FlightMotionActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%FlightMotionFeedback feedback~%~%================================================================================~%MSG: spar_msgs/FlightMotionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%# Feedback~%~%float32 progress					# Progress 0..1 from start to goal~%bool waiting_for_convergence		# Mark to show if waiting for convergence~%~%geometry_msgs/Point goal_position	# Current goal position~%float32 goal_yaw					# Current goal yaw~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <FlightMotionAction>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_goal))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_result))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_feedback))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <FlightMotionAction>))
  "Converts a ROS message object to a list"
  (cl:list 'FlightMotionAction
    (cl:cons ':action_goal (action_goal msg))
    (cl:cons ':action_result (action_result msg))
    (cl:cons ':action_feedback (action_feedback msg))
))
