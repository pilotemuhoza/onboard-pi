//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the uavasr_emulator package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __uavasr_emulator__EMULATORPARAMSCONFIG_H__
#define __uavasr_emulator__EMULATORPARAMSCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace uavasr_emulator
{
  class EmulatorParamsConfigStatics;

  class EmulatorParamsConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(EmulatorParamsConfig &config, const EmulatorParamsConfig &max, const EmulatorParamsConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const EmulatorParamsConfig &config1, const EmulatorParamsConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, EmulatorParamsConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const EmulatorParamsConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, EmulatorParamsConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const EmulatorParamsConfig &config) const = 0;
      virtual void getValue(const EmulatorParamsConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T EmulatorParamsConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T EmulatorParamsConfig::* field;

      virtual void clamp(EmulatorParamsConfig &config, const EmulatorParamsConfig &max, const EmulatorParamsConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const EmulatorParamsConfig &config1, const EmulatorParamsConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, EmulatorParamsConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const EmulatorParamsConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, EmulatorParamsConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const EmulatorParamsConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const EmulatorParamsConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, EmulatorParamsConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, EmulatorParamsConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<EmulatorParamsConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(EmulatorParamsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class AUTOPILOT
{
  public:
    AUTOPILOT()
    {
      state = true;
      name = "Autopilot";
    }

    void setParams(EmulatorParamsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("auto_disarm_height"==(*_i)->name){auto_disarm_height = boost::any_cast<double>(val);}
      }
    }

    double auto_disarm_height;

    bool state;
    std::string name;

    
}autopilot;

class CONTROL
{
  public:
    CONTROL()
    {
      state = true;
      name = "Control";
    }

    void setParams(EmulatorParamsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("w0_xy"==(*_i)->name){w0_xy = boost::any_cast<double>(val);}
        if("w0_z"==(*_i)->name){w0_z = boost::any_cast<double>(val);}
        if("w0_psi"==(*_i)->name){w0_psi = boost::any_cast<double>(val);}
        if("max_vel_xy"==(*_i)->name){max_vel_xy = boost::any_cast<double>(val);}
        if("max_vel_z"==(*_i)->name){max_vel_z = boost::any_cast<double>(val);}
      }
    }

    double w0_xy;
double w0_z;
double w0_psi;
double max_vel_xy;
double max_vel_z;

    bool state;
    std::string name;

    
}control;

class SYSTEM
{
  public:
    SYSTEM()
    {
      state = true;
      name = "System";
    }

    void setParams(EmulatorParamsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("rate_state"==(*_i)->name){rate_state = boost::any_cast<double>(val);}
        if("rate_battery"==(*_i)->name){rate_battery = boost::any_cast<double>(val);}
        if("rate_pose"==(*_i)->name){rate_pose = boost::any_cast<double>(val);}
      }
    }

    double rate_state;
double rate_battery;
double rate_pose;

    bool state;
    std::string name;

    
}system;

}groups;



//#line 29 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double auto_disarm_height;
//#line 32 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double w0_xy;
//#line 33 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double w0_z;
//#line 34 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double w0_psi;
//#line 35 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double max_vel_xy;
//#line 36 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double max_vel_z;
//#line 39 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double rate_state;
//#line 40 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double rate_battery;
//#line 41 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      double rate_pose;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("EmulatorParamsConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const EmulatorParamsConfig &__max__ = __getMax__();
      const EmulatorParamsConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const EmulatorParamsConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const EmulatorParamsConfig &__getDefault__();
    static const EmulatorParamsConfig &__getMax__();
    static const EmulatorParamsConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const EmulatorParamsConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void EmulatorParamsConfig::ParamDescription<std::string>::clamp(EmulatorParamsConfig &config, const EmulatorParamsConfig &max, const EmulatorParamsConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class EmulatorParamsConfigStatics
  {
    friend class EmulatorParamsConfig;

    EmulatorParamsConfigStatics()
    {
EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT, EmulatorParamsConfig> Default("Default", "", 0, 0, true, &EmulatorParamsConfig::groups);
EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::AUTOPILOT, EmulatorParamsConfig::DEFAULT> Autopilot("Autopilot", "", 0, 1, true, &EmulatorParamsConfig::DEFAULT::autopilot);
//#line 29 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.auto_disarm_height = 0.0;
//#line 29 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.auto_disarm_height = std::numeric_limits<double>::infinity();
//#line 29 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.auto_disarm_height = 0.2;
//#line 29 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      Autopilot.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("auto_disarm_height", "double", 0, "Height to enable automatic disarm (set to 0 to disable)", "", &EmulatorParamsConfig::auto_disarm_height)));
//#line 29 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("auto_disarm_height", "double", 0, "Height to enable automatic disarm (set to 0 to disable)", "", &EmulatorParamsConfig::auto_disarm_height)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Autopilot.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::AUTOPILOT, EmulatorParamsConfig::DEFAULT>(Autopilot)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::AUTOPILOT, EmulatorParamsConfig::DEFAULT>(Autopilot)));
EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::CONTROL, EmulatorParamsConfig::DEFAULT> Control("Control", "", 0, 2, true, &EmulatorParamsConfig::DEFAULT::control);
//#line 32 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.w0_xy = 0.0;
//#line 32 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.w0_xy = std::numeric_limits<double>::infinity();
//#line 32 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.w0_xy = 1.0;
//#line 32 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      Control.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("w0_xy", "double", 0, "Natural frequency for lateral position", "", &EmulatorParamsConfig::w0_xy)));
//#line 32 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("w0_xy", "double", 0, "Natural frequency for lateral position", "", &EmulatorParamsConfig::w0_xy)));
//#line 33 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.w0_z = 0.0;
//#line 33 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.w0_z = std::numeric_limits<double>::infinity();
//#line 33 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.w0_z = 1.0;
//#line 33 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      Control.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("w0_z", "double", 0, "Natural frequency vertical position", "", &EmulatorParamsConfig::w0_z)));
//#line 33 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("w0_z", "double", 0, "Natural frequency vertical position", "", &EmulatorParamsConfig::w0_z)));
//#line 34 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.w0_psi = 0.0;
//#line 34 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.w0_psi = std::numeric_limits<double>::infinity();
//#line 34 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.w0_psi = 1.0;
//#line 34 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      Control.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("w0_psi", "double", 0, "Natural frequency for the heading", "", &EmulatorParamsConfig::w0_psi)));
//#line 34 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("w0_psi", "double", 0, "Natural frequency for the heading", "", &EmulatorParamsConfig::w0_psi)));
//#line 35 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.max_vel_xy = 0.0;
//#line 35 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.max_vel_xy = std::numeric_limits<double>::infinity();
//#line 35 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.max_vel_xy = 2.5;
//#line 35 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      Control.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("max_vel_xy", "double", 0, "Maximum horizontal velocity", "", &EmulatorParamsConfig::max_vel_xy)));
//#line 35 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("max_vel_xy", "double", 0, "Maximum horizontal velocity", "", &EmulatorParamsConfig::max_vel_xy)));
//#line 36 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.max_vel_z = 0.0;
//#line 36 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.max_vel_z = std::numeric_limits<double>::infinity();
//#line 36 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.max_vel_z = 1.0;
//#line 36 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      Control.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("max_vel_z", "double", 0, "Natural vertical velocity", "", &EmulatorParamsConfig::max_vel_z)));
//#line 36 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("max_vel_z", "double", 0, "Natural vertical velocity", "", &EmulatorParamsConfig::max_vel_z)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Control.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::CONTROL, EmulatorParamsConfig::DEFAULT>(Control)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::CONTROL, EmulatorParamsConfig::DEFAULT>(Control)));
EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::SYSTEM, EmulatorParamsConfig::DEFAULT> System("System", "", 0, 3, true, &EmulatorParamsConfig::DEFAULT::system);
//#line 39 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.rate_state = 0.0;
//#line 39 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.rate_state = std::numeric_limits<double>::infinity();
//#line 39 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.rate_state = 1.0;
//#line 39 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      System.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("rate_state", "double", 0, "Update rate for system state", "", &EmulatorParamsConfig::rate_state)));
//#line 39 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("rate_state", "double", 0, "Update rate for system state", "", &EmulatorParamsConfig::rate_state)));
//#line 40 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.rate_battery = 0.0;
//#line 40 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.rate_battery = std::numeric_limits<double>::infinity();
//#line 40 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.rate_battery = 1.0;
//#line 40 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      System.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("rate_battery", "double", 0, "Update rate for battery state", "", &EmulatorParamsConfig::rate_battery)));
//#line 40 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("rate_battery", "double", 0, "Update rate for battery state", "", &EmulatorParamsConfig::rate_battery)));
//#line 41 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __min__.rate_pose = 0.0;
//#line 41 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __max__.rate_pose = std::numeric_limits<double>::infinity();
//#line 41 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __default__.rate_pose = 50.0;
//#line 41 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      System.abstract_parameters.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("rate_pose", "double", 0, "Update rate for system pose", "", &EmulatorParamsConfig::rate_pose)));
//#line 41 "/home/cdrone/catkin_ws/src/uavasr_emulator/cfg/EmulatorParams.cfg"
      __param_descriptions__.push_back(EmulatorParamsConfig::AbstractParamDescriptionConstPtr(new EmulatorParamsConfig::ParamDescription<double>("rate_pose", "double", 0, "Update rate for system pose", "", &EmulatorParamsConfig::rate_pose)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      System.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::SYSTEM, EmulatorParamsConfig::DEFAULT>(System)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT::SYSTEM, EmulatorParamsConfig::DEFAULT>(System)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(EmulatorParamsConfig::AbstractGroupDescriptionConstPtr(new EmulatorParamsConfig::GroupDescription<EmulatorParamsConfig::DEFAULT, EmulatorParamsConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<EmulatorParamsConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<EmulatorParamsConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<EmulatorParamsConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    EmulatorParamsConfig __max__;
    EmulatorParamsConfig __min__;
    EmulatorParamsConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const EmulatorParamsConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static EmulatorParamsConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &EmulatorParamsConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const EmulatorParamsConfig &EmulatorParamsConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const EmulatorParamsConfig &EmulatorParamsConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const EmulatorParamsConfig &EmulatorParamsConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<EmulatorParamsConfig::AbstractParamDescriptionConstPtr> &EmulatorParamsConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<EmulatorParamsConfig::AbstractGroupDescriptionConstPtr> &EmulatorParamsConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const EmulatorParamsConfigStatics *EmulatorParamsConfig::__get_statics__()
  {
    const static EmulatorParamsConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = EmulatorParamsConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __EMULATORPARAMSRECONFIGURATOR_H__
