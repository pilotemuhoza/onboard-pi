// Generated by gencpp from file spar_msgs/FlightMotionResult.msg
// DO NOT EDIT!


#ifndef SPAR_MSGS_MESSAGE_FLIGHTMOTIONRESULT_H
#define SPAR_MSGS_MESSAGE_FLIGHTMOTIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace spar_msgs
{
template <class ContainerAllocator>
struct FlightMotionResult_
{
  typedef FlightMotionResult_<ContainerAllocator> Type;

  FlightMotionResult_()
    : final_position()
    , final_yaw(0.0)  {
    }
  FlightMotionResult_(const ContainerAllocator& _alloc)
    : final_position(_alloc)
    , final_yaw(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _final_position_type;
  _final_position_type final_position;

   typedef float _final_yaw_type;
  _final_yaw_type final_yaw;





  typedef boost::shared_ptr< ::spar_msgs::FlightMotionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spar_msgs::FlightMotionResult_<ContainerAllocator> const> ConstPtr;

}; // struct FlightMotionResult_

typedef ::spar_msgs::FlightMotionResult_<std::allocator<void> > FlightMotionResult;

typedef boost::shared_ptr< ::spar_msgs::FlightMotionResult > FlightMotionResultPtr;
typedef boost::shared_ptr< ::spar_msgs::FlightMotionResult const> FlightMotionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spar_msgs::FlightMotionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spar_msgs::FlightMotionResult_<ContainerAllocator1> & lhs, const ::spar_msgs::FlightMotionResult_<ContainerAllocator2> & rhs)
{
  return lhs.final_position == rhs.final_position &&
    lhs.final_yaw == rhs.final_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spar_msgs::FlightMotionResult_<ContainerAllocator1> & lhs, const ::spar_msgs::FlightMotionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spar_msgs::FlightMotionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spar_msgs::FlightMotionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spar_msgs::FlightMotionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b3178d27ded286f74bb27991e7d5fea";
  }

  static const char* value(const ::spar_msgs::FlightMotionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b3178d27ded286fULL;
  static const uint64_t static_value2 = 0x74bb27991e7d5feaULL;
};

template<class ContainerAllocator>
struct DataType< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spar_msgs/FlightMotionResult";
  }

  static const char* value(const ::spar_msgs::FlightMotionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# Result\n"
"\n"
"geometry_msgs/Point final_position	# Final commanded position\n"
"float32 final_yaw					# Final commanded yaw\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::spar_msgs::FlightMotionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.final_position);
      stream.next(m.final_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightMotionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spar_msgs::FlightMotionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spar_msgs::FlightMotionResult_<ContainerAllocator>& v)
  {
    s << indent << "final_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.final_position);
    s << indent << "final_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.final_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPAR_MSGS_MESSAGE_FLIGHTMOTIONRESULT_H
