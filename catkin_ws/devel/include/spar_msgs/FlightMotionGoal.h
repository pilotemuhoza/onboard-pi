// Generated by gencpp from file spar_msgs/FlightMotionGoal.msg
// DO NOT EDIT!


#ifndef SPAR_MSGS_MESSAGE_FLIGHTMOTIONGOAL_H
#define SPAR_MSGS_MESSAGE_FLIGHTMOTIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace spar_msgs
{
template <class ContainerAllocator>
struct FlightMotionGoal_
{
  typedef FlightMotionGoal_<ContainerAllocator> Type;

  FlightMotionGoal_()
    : motion(0)
    , position()
    , yaw(0.0)
    , velocity_vertical(0.0)
    , velocity_horizontal(0.0)
    , yawrate(0.0)
    , wait_for_convergence(false)
    , position_radius(0.0)
    , yaw_range(0.0)  {
    }
  FlightMotionGoal_(const ContainerAllocator& _alloc)
    : motion(0)
    , position(_alloc)
    , yaw(0.0)
    , velocity_vertical(0.0)
    , velocity_horizontal(0.0)
    , yawrate(0.0)
    , wait_for_convergence(false)
    , position_radius(0.0)
    , yaw_range(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _motion_type;
  _motion_type motion;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _velocity_vertical_type;
  _velocity_vertical_type velocity_vertical;

   typedef float _velocity_horizontal_type;
  _velocity_horizontal_type velocity_horizontal;

   typedef float _yawrate_type;
  _yawrate_type yawrate;

   typedef uint8_t _wait_for_convergence_type;
  _wait_for_convergence_type wait_for_convergence;

   typedef float _position_radius_type;
  _position_radius_type position_radius;

   typedef float _yaw_range_type;
  _yaw_range_type yaw_range;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOTION_STOP)
  #undef MOTION_STOP
#endif
#if defined(_WIN32) && defined(MOTION_GOTO)
  #undef MOTION_GOTO
#endif
#if defined(_WIN32) && defined(MOTION_GOTO_POS)
  #undef MOTION_GOTO_POS
#endif
#if defined(_WIN32) && defined(MOTION_GOTO_YAW)
  #undef MOTION_GOTO_YAW
#endif
#if defined(_WIN32) && defined(MOTION_TAKEOFF)
  #undef MOTION_TAKEOFF
#endif
#if defined(_WIN32) && defined(MOTION_LAND)
  #undef MOTION_LAND
#endif

  enum {
    MOTION_STOP = 0u,
    MOTION_GOTO = 1u,
    MOTION_GOTO_POS = 2u,
    MOTION_GOTO_YAW = 3u,
    MOTION_TAKEOFF = 4u,
    MOTION_LAND = 5u,
  };


  typedef boost::shared_ptr< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FlightMotionGoal_

typedef ::spar_msgs::FlightMotionGoal_<std::allocator<void> > FlightMotionGoal;

typedef boost::shared_ptr< ::spar_msgs::FlightMotionGoal > FlightMotionGoalPtr;
typedef boost::shared_ptr< ::spar_msgs::FlightMotionGoal const> FlightMotionGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spar_msgs::FlightMotionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spar_msgs::FlightMotionGoal_<ContainerAllocator1> & lhs, const ::spar_msgs::FlightMotionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.motion == rhs.motion &&
    lhs.position == rhs.position &&
    lhs.yaw == rhs.yaw &&
    lhs.velocity_vertical == rhs.velocity_vertical &&
    lhs.velocity_horizontal == rhs.velocity_horizontal &&
    lhs.yawrate == rhs.yawrate &&
    lhs.wait_for_convergence == rhs.wait_for_convergence &&
    lhs.position_radius == rhs.position_radius &&
    lhs.yaw_range == rhs.yaw_range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spar_msgs::FlightMotionGoal_<ContainerAllocator1> & lhs, const ::spar_msgs::FlightMotionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "830b68dc04cce4ae8cd0b0280e7dd30a";
  }

  static const char* value(const ::spar_msgs::FlightMotionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x830b68dc04cce4aeULL;
  static const uint64_t static_value2 = 0x8cd0b0280e7dd30aULL;
};

template<class ContainerAllocator>
struct DataType< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spar_msgs/FlightMotionGoal";
  }

  static const char* value(const ::spar_msgs::FlightMotionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"\n"
"# Motion to execute\n"
"uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)\n"
"uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)\n"
"uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)\n"
"uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)\n"
"uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)\n"
"uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)\n"
"\n"
"uint8 motion\n"
"\n"
"# Positional information (some things may be ignored, see above)\n"
"geometry_msgs/Point position\n"
"float32 yaw\n"
"\n"
"# Velocity information (some things may be ignored, see above)\n"
"# Goal will act as \"setpoint\" if all velocities are ==0, values of <0 will be rejected\n"
"# If all velocities are ==0, goal will imidiately be finished if not using \"wait_for_convergence\"\n"
"# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will\n"
"# be used to coordinate the motion such that all motions finish at the same point in time\n"
"float32 velocity_vertical			# Speed to ascend and descent\n"
"float32 velocity_horizontal			# Speed to translate\n"
"float32 yawrate						# Speed to rotate\n"
"\n"
"# Convergence information (wait until at location before marking 'complete')\n"
"# If enabled, radius and range values of <=0 will be rejected\n"
"# Note: Landing motions will do not accept \"wait_for_convergence\", but instead will continue\n"
"#		landing until the action is either cancelled or the UAV is disarmed\n"
"bool wait_for_convergence			# Enable \"wait for convergence\"\n"
"float32 position_radius				# Positional radius around final location (bubble waypoint)\n"
"float32 yaw_range					# Angular range around final direction (direction wedge)\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::spar_msgs::FlightMotionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion);
      stream.next(m.position);
      stream.next(m.yaw);
      stream.next(m.velocity_vertical);
      stream.next(m.velocity_horizontal);
      stream.next(m.yawrate);
      stream.next(m.wait_for_convergence);
      stream.next(m.position_radius);
      stream.next(m.yaw_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightMotionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spar_msgs::FlightMotionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spar_msgs::FlightMotionGoal_<ContainerAllocator>& v)
  {
    s << indent << "motion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "velocity_vertical: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_vertical);
    s << indent << "velocity_horizontal: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_horizontal);
    s << indent << "yawrate: ";
    Printer<float>::stream(s, indent + "  ", v.yawrate);
    s << indent << "wait_for_convergence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wait_for_convergence);
    s << indent << "position_radius: ";
    Printer<float>::stream(s, indent + "  ", v.position_radius);
    s << indent << "yaw_range: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPAR_MSGS_MESSAGE_FLIGHTMOTIONGOAL_H
