# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spar_msgs/FlightMotionGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class FlightMotionGoal(genpy.Message):
  _md5sum = "830b68dc04cce4ae8cd0b0280e7dd30a"
  _type = "spar_msgs/FlightMotionGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal

# Motion to execute
uint8 MOTION_STOP = 0				# Stop in current place (ignores x/y/z/yaw/convergence)
uint8 MOTION_GOTO = 1				# Fly to location (x/y/z/yaw)
uint8 MOTION_GOTO_POS = 2			# Fly to location (x/y/z, maintain current yaw)
uint8 MOTION_GOTO_YAW = 3			# Rotate at current location (ignores x/y/z)
uint8 MOTION_TAKEOFF = 4			# Performs a take-off at current location to hight 'z' (ignores x/y/yaw)
uint8 MOTION_LAND = 5				# Performs a landing at current location at vertical speed (ignores x/y/z/yaw)

uint8 motion

# Positional information (some things may be ignored, see above)
geometry_msgs/Point position
float32 yaw

# Velocity information (some things may be ignored, see above)
# Goal will act as "setpoint" if all velocities are ==0, values of <0 will be rejected
# If all velocities are ==0, goal will imidiately be finished if not using "wait_for_convergence"
# For multiple-directional motions (e.g. goto: motion in x/y/z/yaw), the slowest motion will
# be used to coordinate the motion such that all motions finish at the same point in time
float32 velocity_vertical			# Speed to ascend and descent
float32 velocity_horizontal			# Speed to translate
float32 yawrate						# Speed to rotate

# Convergence information (wait until at location before marking 'complete')
# If enabled, radius and range values of <=0 will be rejected
# Note: Landing motions will do not accept "wait_for_convergence", but instead will continue
#		landing until the action is either cancelled or the UAV is disarmed
bool wait_for_convergence			# Enable "wait for convergence"
float32 position_radius				# Positional radius around final location (bubble waypoint)
float32 yaw_range					# Angular range around final direction (direction wedge)


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  MOTION_STOP = 0
  MOTION_GOTO = 1
  MOTION_GOTO_POS = 2
  MOTION_GOTO_YAW = 3
  MOTION_TAKEOFF = 4
  MOTION_LAND = 5

  __slots__ = ['motion','position','yaw','velocity_vertical','velocity_horizontal','yawrate','wait_for_convergence','position_radius','yaw_range']
  _slot_types = ['uint8','geometry_msgs/Point','float32','float32','float32','float32','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motion,position,yaw,velocity_vertical,velocity_horizontal,yawrate,wait_for_convergence,position_radius,yaw_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlightMotionGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motion is None:
        self.motion = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.yaw is None:
        self.yaw = 0.
      if self.velocity_vertical is None:
        self.velocity_vertical = 0.
      if self.velocity_horizontal is None:
        self.velocity_horizontal = 0.
      if self.yawrate is None:
        self.yawrate = 0.
      if self.wait_for_convergence is None:
        self.wait_for_convergence = False
      if self.position_radius is None:
        self.position_radius = 0.
      if self.yaw_range is None:
        self.yaw_range = 0.
    else:
      self.motion = 0
      self.position = geometry_msgs.msg.Point()
      self.yaw = 0.
      self.velocity_vertical = 0.
      self.velocity_horizontal = 0.
      self.yawrate = 0.
      self.wait_for_convergence = False
      self.position_radius = 0.
      self.yaw_range = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3d4fB2f().pack(_x.motion, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity_vertical, _x.velocity_horizontal, _x.yawrate, _x.wait_for_convergence, _x.position_radius, _x.yaw_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.motion, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity_vertical, _x.velocity_horizontal, _x.yawrate, _x.wait_for_convergence, _x.position_radius, _x.yaw_range,) = _get_struct_B3d4fB2f().unpack(str[start:end])
      self.wait_for_convergence = bool(self.wait_for_convergence)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3d4fB2f().pack(_x.motion, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity_vertical, _x.velocity_horizontal, _x.yawrate, _x.wait_for_convergence, _x.position_radius, _x.yaw_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.motion, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity_vertical, _x.velocity_horizontal, _x.yawrate, _x.wait_for_convergence, _x.position_radius, _x.yaw_range,) = _get_struct_B3d4fB2f().unpack(str[start:end])
      self.wait_for_convergence = bool(self.wait_for_convergence)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3d4fB2f = None
def _get_struct_B3d4fB2f():
    global _struct_B3d4fB2f
    if _struct_B3d4fB2f is None:
        _struct_B3d4fB2f = struct.Struct("<B3d4fB2f")
    return _struct_B3d4fB2f
