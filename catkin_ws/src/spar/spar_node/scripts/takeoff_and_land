#!/usr/bin/env python3

import sys
from math import *

#import roslib
#roslib.load_manifest('spar_node')
import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

def send_takeoff_motion(spar_client):
	# Create our goal
	goal = FlightMotionGoal()
	goal.motion = FlightMotionGoal.MOTION_TAKEOFF
	goal.position.z = rospy.get_param("~height", 1.0)			# Other position information is ignored
	goal.velocity_vertical = rospy.get_param("~speed", 0.2)		# Other velocity information is ignored
	goal.wait_for_convergence = True							# Wait for our takeoff "waypoint" to be reached
	goal.position_radius = rospy.get_param("~position_radius", 0.1)
	goal.yaw_range = rospy.get_param("~yaw_range", 0.1)

	# Send the goal
	rospy.loginfo("Sending goal motion...")
	spar_client.send_goal(goal)
	# If shutdown is issued, cancel current mission before rospy is shutdown
	rospy.on_shutdown(lambda : spar_client.cancel_goal())
	# Wait for the result of the goal
	spar_client.wait_for_result()

	# Output some feedback for our flight
	result = spar_client.get_state()
	if result == GoalStatus.SUCCEEDED:
		rospy.loginfo("Take-off complete!")
	else:
		rospy.logerr("Take-off failed!")

		# Detailed Feedback
		if result != GoalStatus.SUCCEEDED:
			if(result == GoalStatus.PENDING) or (result == GoalStatus.ACTIVE):
				rospy.loginfo("Sent command to cancel current mission")
			elif(result == GoalStatus.PREEMPTED):
				rospy.logwarn("The current mission was cancelled")
			elif(result == GoalStatus.ABORTED):
				rospy.logwarn("The current mission was aborted")
			elif(result == GoalStatus.RECALLED):
				rospy.logerr("Error: The current mission was recalled")
			elif(result == GoalStatus.REJECTED):
				rospy.logerr("Error: The current mission was rejected")
			else:
				rospy.logerr("Error: An unknown goal status was recieved")

def send_landing_motion(spar_client):
	# Create our goal
	goal = FlightMotionGoal()
	goal.motion = FlightMotionGoal.MOTION_LAND
	goal.velocity_vertical = rospy.get_param("~speed", 0.2)		# Other velocity information is ignored
	# No other information is used

	# Send the goal
	rospy.loginfo("Sending goal motion...")
	spar_client.send_goal(goal)
	 # If shutdown is issued, cancel current mission before rospy is shutdown
	rospy.on_shutdown(lambda : spar_client.cancel_goal())
	# Wait for the result of the goal
	spar_client.wait_for_result()

	# Output some feedback for our flight
	result = spar_client.get_state()
	if result == GoalStatus.SUCCEEDED:
		rospy.loginfo("Landing complete!")
	else:
		rospy.logerr("Landing failed!")

		# Detailed Feedback
		if result != GoalStatus.SUCCEEDED:
			if(result == GoalStatus.PENDING) or (result == GoalStatus.ACTIVE):
				rospy.loginfo("Sent command to cancel current mission")
			elif(result == GoalStatus.PREEMPTED):
				rospy.logwarn("The current mission was cancelled")
			elif(result == GoalStatus.ABORTED):
				rospy.logwarn("The current mission was aborted")
			elif(result == GoalStatus.RECALLED):
				rospy.logerr("Error: The current mission was recalled")
			elif(result == GoalStatus.REJECTED):
				rospy.logerr("Error: The current mission was rejected")
			else:
				rospy.logerr("Error: An unknown goal status was recieved")

def main():
	# Initialise ROS
	rospy.init_node('takeoff', anonymous=True)
	# Get our action namespace (where to send flight commands to)
	action_ns = rospy.get_param("~action_topic", 'spar/flight')

	# Create our action client
	spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
	rospy.loginfo("Waiting for spar...")
	spar_client.wait_for_server()

	# Send the flight command
	# This will lock the thread until it is "done"
	# Make sure "ros is ok" in case we hit CTRL-C while waiting above
	if not rospy.is_shutdown():
		# Catch a single CTRL-C to cancel the take-off in case of emergency
		rospy.loginfo("Performing take-off...")
		send_takeoff_motion(spar_client)

		if not rospy.is_shutdown():
			rospy.sleep(rospy.Duration(5))

		if not rospy.is_shutdown():
			rospy.loginfo("Performing landing...")
			send_landing_motion(spar_client)

if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass

	print('')
